# Import libraries
from pathlib import Path
import time
import warnings

warnings.filterwarnings("ignore")

import pandas as pd
#import nglview as nv
import openbabel
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import colors
from plip.structure.preparation import PDBComplex
from plip.exchange.report import BindingSiteReport

pdb_id = "5LXT"



def retrieve_plip_interactions(pdb_file):
    """
    Returns
        A dictionary of the binding sites and the interactions.
    """
    protlig = PDBComplex()
    protlig.load_pdb(pdb_file)  # load the pdb file
    for ligand in protlig.ligands:
        protlig.characterize_complex(ligand)  # find ligands and analyze interactions
    sites = {}
    # loop over binding sites
    for key, site in sorted(protlig.interaction_sets.items()):
        binding_site = BindingSiteReport(site)  # collect data about interactions
        # tuples of *_features and *_info will be converted to pandas DataFrame
        keys = (
            "hydrophobic",
            "hbond",
            "waterbridge",
            "saltbridge",
            "pistacking",
            "pication",
            "halogen",
            "metal",
        )
 
        interactions = {
            k: [getattr(binding_site, k + "_features")] + getattr(binding_site, k + "_info")
            for k in keys
        }
        sites[key] = interactions
    return sites

interactions_by_site = retrieve_plip_interactions(r'C:\Users\joshi\OneDrive\Documents\Discodermolide paper\5lXT.pdb')

#print(
 #   f"Number of binding sites detected in {pdb_id} : "
 #   f"{len(interactions_by_site)}\n"
 #   f"with {interactions_by_site.keys()}"
#)

index_of_selected_site = 0
selected_site = list(interactions_by_site.keys())[index_of_selected_site]

def create_df_from_binding_site(selected_site_interactions, interaction_type="hbond"):
    """

    Returns
    -------
    pd.DataFrame :
        DataFrame with information retrieved from PLIP.
    """

    # check if interaction type is valid:
    valid_types = [
        "hydrophobic",
        "hbond",
        "waterbridge",
        "saltbridge",
        "pistacking",
        "pication",
        "halogen",
        "metal",
    ]

    if interaction_type not in valid_types:
        print("!!! Wrong interaction type specified. Hbond is chosen by default!!!\n")
        interaction_type = "hbond"

    df = pd.DataFrame.from_records(
        # data is stored AFTER the column names
        selected_site_interactions[interaction_type][1:],
        # column names are always the first element
        columns=selected_site_interactions[interaction_type][0],
    )
    return df

print(create_df_from_binding_site(interactions_by_site[selected_site], interaction_type="hbond"))
print(create_df_from_binding_site(interactions_by_site[selected_site], interaction_type="hydrophobic"))
