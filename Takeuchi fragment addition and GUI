import sys
import random
from itertools import product
from PyQt5.QtWidgets import QApplication, QWidget, QLabel, QLineEdit, QVBoxLayout, QPushButton, QGraphicsView, QGraphicsScene, QMessageBox
from PyQt5.QtGui import QPixmap, QImage
from rdkit import Chem
from rdkit.Chem import Draw
from PIL import Image
from PyQt5.QtCore import QBuffer, QIODevice
import traceback
from PyQt5.QtWidgets import QScrollArea
from rdkit.Chem import rdDepictor


def get_random_smiles(filename):
    with open(filename, 'r') as file:
        lines = file.readlines()
    return random.choice(lines)



random_sidechain_smiles = Chem.MolFromSmiles(get_random_smiles('C:\\Users\\joshi\\OneDrive\\Desktop\\DiscoTech\\smiles.txt.txt'))



def get_highlighted_atoms(mol, important_indices=[]):
    connecting_atoms = set()
    for idx in important_indices:
        for jdx in important_indices:
            if idx != jdx:
                path = Chem.rdmolops.GetShortestPath(mol, idx, jdx)
                connecting_atoms.update(path)

    highlighted_atoms = set(important_indices).union(connecting_atoms)
    return list(highlighted_atoms)

modified_mols = []

def mark_and_replace_atoms(smiles, important_atom_indices, num_variants=5):
    composite_images = []
    global modified_mols
   

    mol = Chem.MolFromSmiles(smiles)
    if mol is None:
        return [], "Invalid SMILES code."

    # Get the atoms to highlight
    highlighted_atoms = get_highlighted_atoms(mol, important_atom_indices)
    
    mol = reduce_structure(mol, important_atom_indices)
    num_atoms = mol.GetNumAtoms()
    
    # Ask the user for the indices of unimportant atoms
    unimportant_indices = [index for index in range(num_atoms) if index not in important_atom_indices]

    # Draw the original molecule once
    original_mol = Chem.Draw.PrepareMolForDrawing(Chem.MolFromSmiles(smiles))
    img_original = Draw.MolToImage(original_mol, size=(200, 200), highlightAtoms=highlighted_atoms, highlightColor=(0.8,0.8,0))
    composite_images.append(img_original)
    

    for i in range(num_variants):
        fragment = Chem.MolFromSmiles(get_random_smiles('C:\\Users\\joshi\\OneDrive\\Desktop\\DiscoTech\\smiles.txt.txt'))  # Getting a new random fragment for each replacement


        available_atoms = [atom.GetIdx() for atom in mol.GetAtoms() if atom.GetSymbol() not in ['H', 'F', 'Cl', 'Br']]
        replacement_connection_point = random.choice(available_atoms)

        mod_mol = Chem.ReplaceSubstructs(fragment, Chem.MolFromSmiles('[*]'), mol,replaceAll=True, replacementConnectionPoint=replacement_connection_point)
        modified_mol = Chem.Draw.PrepareMolForDrawing(mod_mol[0])
        img_modified = Draw.MolToImage(modified_mol, size=(200, 200))

    
        modified_mols.append(mod_mol[0])  # Appending to the global list
        composite_images.append(img_modified)
    
        
    return composite_images, None


    
def reduce_structure(mol, important_indices=[]):
    # Get connecting atoms between the important atoms
    connecting_atoms = set()
    for idx in important_indices:
        for jdx in important_indices:
            if idx != jdx:
                path = Chem.rdmolops.GetShortestPath(mol, idx, jdx)
                connecting_atoms.update(path)

    # Combine important and connecting atom indices
    keep_atoms = set(important_indices).union(connecting_atoms)

    # Create a list of atoms to remove
    remove_atoms = [atom.GetIdx() for atom in mol.GetAtoms() if atom.GetIdx() not in keep_atoms]
    
    # Sort in reverse order to ensure the indices don't get mixed up after each removal
    for idx in sorted(remove_atoms, reverse=True):
        mol = Chem.RWMol(mol)  # Convert to RWMol for modification
        mol.RemoveAtom(idx)

    return mol


class SmilesVisualizer(QWidget):
    def __init__(self):
        super().__init__()
        self.initUI()

    def initUI(self):
        layout = QVBoxLayout()

        self.smiles_label = QLabel("Enter SMILES:")
        self.smiles_entry = QLineEdit(self)
        self.indices_label = QLabel("Enter important atom indices (comma separated):")
        self.indices_entry = QLineEdit(self)

        self.num_variants_label = QLabel("Number of modified variants:")
        self.num_variants_entry = QLineEdit(self)
        self.num_variants_entry.setText("5")  # Default value

        self.process_button = QPushButton("Visualize", self)
        self.process_button.clicked.connect(self.visualize_molecule)

         # Setting up a scroll area
        self.scroll_area = QScrollArea(self)
        self.scroll_content = QWidget()
        self.scroll_layout = QVBoxLayout()
        self.scroll_content.setLayout(self.scroll_layout)
        self.scroll_area.setWidget(self.scroll_content)
        self.scroll_area.setWidgetResizable(True)
        layout.addWidget(self.scroll_area)

        self.scroll_area.setMinimumSize(50, 60) # Example size, adjust as per requirements

        
        self.image_labels = []  # Assuming a maximum of 5 images for now
        self.scenes = []

        for i, image_label in enumerate(self.image_labels):
            image_label.setScene(self.scenes[i])
            layout.addWidget(image_label)

        layout.addWidget(self.smiles_label)
        layout.addWidget(self.smiles_entry)
        layout.addWidget(self.indices_label)
        layout.addWidget(self.indices_entry)
        layout.addWidget(self.num_variants_label)
        layout.addWidget(self.num_variants_entry)
        layout.addWidget(self.process_button)

        self.setLayout(layout)
        self.setWindowTitle('DiscoTech alpha Takeuchi 1.0.0.2')
        self.setGeometry(100, 100, 650, 700)  # Adjusted size for potential 5 images

    def visualize_molecule(self):
        global modified_mols
        modified_mols = []
    
        smiles = self.smiles_entry.text()
        important_indices_str = self.indices_entry.text()
    
        try:
            num_variants = int(self.num_variants_entry.text())
        except ValueError:
            QMessageBox.critical(self, "Error", "Invalid number for variants!")
            return

        try:
        # Convert the indices string into a list of integers
            important_indices = list(map(int, important_indices_str.split(',')))
        except Exception as e:
            traceback.print_exc()
            QMessageBox.critical(self, "Error", f"An error occurred: {e}")

        try:
        # Call the mark_and_replace_atoms function
            composite_imgs, error = mark_and_replace_atoms(smiles, important_indices, num_variants)
        except Exception as e:
            traceback.print_exc()
            QMessageBox.critical(self, "Error", f"An error occurred: {e}")
            return

        if error:
            QMessageBox.critical(self, "Error", error)
            return

        mols_to_draw = [Chem.MolFromSmiles(smiles)]
        mols_to_draw.extend(modified_mols)

    # Ensure each molecule has coordinates
        for mol in mols_to_draw:
            if not mol.GetNumConformers():
                rdDepictor.Compute2DCoords(mol)

    # Create a grid image of the molecules
        img = Draw.MolsToGridImage(mols_to_draw, molsPerRow=4, subImgSize=(200,500), legends=["Original"] + ["Modified"] * num_variants)

    # Convert PIL image to QPixmap
        buffer = QBuffer()
        buffer.open(QIODevice.WriteOnly)
        img.save(buffer, "PNG")
        pixmap = QPixmap()
        pixmap.loadFromData(buffer.data(), "PNG")

    # Display this grid image in the GUI
        if self.scenes:
            self.scenes[0].clear()
            self.scenes[0].addPixmap(pixmap.scaled(1600, 1600))  # Adjust the scaling if needed
        else:
            new_scene = QGraphicsScene()
            new_label = QGraphicsView()
            self.scenes.append(new_scene)
            self.image_labels.append(new_label)
            new_label.setFixedSize(800, 800)  # Adjust the size if needed
            self.scroll_layout.addWidget(new_label)
            new_scene.addPixmap(pixmap.scaled(800, 800))  # Adjust the scaling if needed
            new_label.setScene(new_scene)

    # Writing the modified molecules to an SDF file
        with Chem.SDWriter('output.sdf') as writer:
            for mol in modified_mols:
                writer.write(mol)


if __name__ == '__main__':
    app = QApplication(sys.argv)
    ex = SmilesVisualizer()
    ex.show()
    sys.exit(app.exec_())


